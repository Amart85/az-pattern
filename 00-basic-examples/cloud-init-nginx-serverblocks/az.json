{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "northeurope",
            "metadata": {
                "description": "Azure region"
            }
        },
        "vnet1": {
            "type": "object",
            "defaultValue": {
                "location": "[parameters('location')]",
                "name": "vnet1",
                "addressPrefix": "10.1.0.0/24",
                "appSubnetName": "appSubnet",
                "appSubnetPrefix": "10.1.0.0/27",
                "AzureBastionSubnetName": "AzureBastionSubnet",
                "AzureBastionSubnetPrefix": "10.1.0.128/26"
            }
        },
        "linux": {
            "type": "object",
            "defaultValue": {
                "publisher": "canonical",
                "offer": "0001-com-ubuntu-server-jammy",
                "sku": "22_04-lts-gen2"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B1s",
            "metadata": {
                "description": "Size of VM"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "sshPublicKey",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage account type for the disks of the VM"
            }
        },
        "acceleratedNetworking": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "acceletated networking"
            }
        },
        "cloudInitContentNVA1": {
            "type": "string",
            "metadata": {
                "description": "content of cloud-init config file for NVA2"
            }
        },
        "mngIP": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "management public IP address to connect in SSH to the VM. it can be set to empty string if you do not want filtering"
            }
        }
    },
    "variables": {
        "bastion1Name": "bastion1",
        "bastion1PublicIPAddressName": "[concat(variables('bastion1Name'),'-pubIP')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "linuxUpdate": "sudo apt update",
        "linuxNgixCommand": "[concat('sudo apt-get -y install nginx && sudo systemctl enable nginx && sudo systemctl start nginx',' && ','echo \"<style> h1 { color: blue; } </style> <h1>\" > /var/www/html/index.nginx-debian.html', ' && ', 'cat /etc/hostname >> /var/www/html/index.nginx-debian.html', ' && ', 'echo \" </h1>\" >> /var/www/html/index.nginx-debian.html')]",
        "linuxCommand": "[concat( 'sleep 1m', ' &&', variables('linuxUpdate'), ' && ', variables('linuxNgixCommand') )]",

        "vmapp1Name": "vmapp1",
        "vmapp1PrivIP": "10.1.0.20",
        "nva2Name": "nva1",
        "nva2PrivIP": "10.1.0.10",
        "customDataNVA1": "[parameters('cloudInitContentNVA1') ]",
        
        "vmArray": [
            {
                "deployment": false,
                "location": "[parameters('vnet1').location]",
                "vmName": "[variables('vmapp1Name')]",
                "vmSize": "[parameters('vmsize')]",
                "publisher": "[parameters('linux').publisher]",
                "offer": "[parameters('linux').offer]",
                "sku": "[parameters('linux').sku]",
                "vnetName": "[parameters('vnet1').name]",
                "subnetName": "[parameters('vnet1').appSubnetName]",
                "nicName": "[concat(variables('vmapp1Name'),'-nic')]",
                "privateIP": "[variables('vmapp1PrivIP')]",
                "enableIPForwarding": false,
                "acceleratedNetworking": "[parameters('acceleratedNetworking')]",
                "nsgName": "[concat(variables('vmapp1Name'),'-nsg')]",
                "pubIP": "[concat(variables('vmapp1Name'),'-pubIP')]",
                "commandToExecute": "[variables('linuxCommand')]"
            }
        ],
        "vmCount": "[length(variables('vmArray'))]",
        "nvaArray": [
            {
                "deployment": true,
                "location": "[parameters('vnet1').location]",
                "vmName": "[variables('nva2Name')]",
                "vmSize": "[parameters('vmsize')]",
                "publisher": "[parameters('linux').publisher]",
                "offer": "[parameters('linux').offer]",
                "sku": "[parameters('linux').sku]",
                "vnetName": "[parameters('vnet1').name]",
                "subnetName": "[parameters('vnet1').appSubnetName]",
                "nicName": "[concat(variables('nva2Name'),'-nic')]",
                "privateIP": "[variables('nva2PrivIP')]",
                "enableIPForwarding": true,
                "acceleratedNetworking": "[parameters('acceleratedNetworking')]",
                "customData": "[variables('customDataNVA1')]",
                "nsgName": "[concat(variables('nva2Name'),'-nsg')]",
                "pubIP": "[concat(variables('nva2Name'),'-pubIP')]"
            }
        ],
        "nvaCount": "[length(variables('nvaArray'))]",
        "vmStorageAccountType": "[parameters('storageAccountType')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnet1').name]",
            "apiVersion": "2021-05-01",
            "location": "[parameters('vnet1').location]",
            "dependsOn": [
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnet1').addressPrefix]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('vnet1').appSubnetName]",
                        "properties": {
                            "addressPrefix": "[parameters('vnet1').appSubnetPrefix]"
                        }
                    },
                    {
                        "name": "[parameters('vnet1').AzureBastionSubnetName]",
                        "properties": {
                            "addressPrefix": "[parameters('vnet1').AzureBastionSubnetPrefix]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('bastion1PublicIPAddressName')]",
            "apiVersion": "2021-05-01",
            "location": "[parameters('vnet1').location]",
            "comments": "public IP of the Azure bastion in vnet1 vnet",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2021-05-01",
            "name": "[variables('bastion1Name')]",
            "location": "[parameters('vnet1').location]",
            "comments": "Azure bastion in vnet1 vnet",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastion1PublicIPAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet1').name)]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "disableCopyPaste": false,
                "enableFileCopy": true,
                "enableIpConnect": true,
                "enableShareableLink": false,
                "enableTunneling": true,
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastion1PublicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet1').name, parameters('vnet1').AzureBastionSubnetName)]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "condition": "[variables('vmArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-05-01",
            "name": "[variables('vmArray')[copyIndex()].nsgName]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[if(equals(parameters('mngIP'), ''), '*', parameters('mngIP'))]",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "copy": {
                "name": "nsgCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "condition": "[variables('vmArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat( variables('vmArray')[copyIndex()].pubIP )]",
            "apiVersion": "2020-05-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "copy": {
                "name": "pubIPCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "condition": "[variables('vmArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('vmArray')[copyIndex()].nicName]",
            "apiVersion": "2021-05-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks',variables('vmArray')[copyIndex()].vnetName) ]",
                "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmArray')[copyIndex()].pubIP) ]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName )]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('vmArray')[copyIndex()].privateIP]",
                            "subnet": {
                                "id": "[resourceId( 'Microsoft.Network/virtualNetworks/subnets', variables('vmArray')[copyIndex()].vnetName, variables('vmArray')[copyIndex()].subnetName)]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmArray')[copyIndex()].pubIP) ]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName )]"
                },
                "primary": true,
                "enableIPForwarding": "[variables('vmArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('vmArray')[copyIndex()].acceleratedNetworking]"
            },
            "copy": {
                "name": "nicCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "condition": "[variables('vmArray')[copyIndex()].deployment]",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmArray')[copyIndex()].vmName]",
            "apiVersion": "2021-11-01",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('vmArray')[copyIndex()].nicName )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmArray')[copyIndex()].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('vmArray')[copyIndex()].vmName]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vmArray')[copyIndex()].publisher]",
                        "offer": "[variables('vmArray')[copyIndex()].offer]",
                        "sku": "[variables('vmArray')[copyIndex()].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('vmStorageAccountType')]"
                        },
                        "name": "[concat(variables('vmArray')[copyIndex()].vmName, '-OSdisk')]"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',  variables('vmArray')[copyIndex()].nicName)]"
                        }
                    ]
                }
            },
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "condition": "[variables('vmArray')[copyIndex()].deployment]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmArray')[copyIndex()].vmName, '/', 'installcustomscript')]",
            "apiVersion": "2021-11-01",
            "comments": "custom script extension for ubuntu",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('vmCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmArray')[copyIndex()].vmName )]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "[variables('vmArray')[copyIndex()].commandToExecute]"
                }
            }
        },
        {
            "condition": "[variables('nvaArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-11-01",
            "name": "[variables('nvaArray')[copyIndex()].nsgName]",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "comments": " NSG applied to the NIC of the NVA",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[if(equals(parameters('mngIP'), ''), '*', parameters('mngIP'))]",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "copy": {
                "name": "nsgCopy",
                "count": "[variables('nvaCount')]"
            }
        },
        {
            "condition": "[variables('nvaArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat( variables('nvaArray')[copyIndex()].pubIP )]",
            "apiVersion": "2020-11-01",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "copy": {
                "name": "pubIPCopy",
                "count": "[variables('nvaCount')]"
            }
        },
        {
            "condition": "[variables('nvaArray')[copyIndex()].deployment]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nvaArray')[copyIndex()].nicName]",
            "apiVersion": "2020-11-01",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "dependsOn": [
                 "[resourceId('Microsoft.Network/virtualNetworks',variables('nvaArray')[copyIndex()].vnetName ) ]",
                "[resourceId('Microsoft.Network/publicIPAddresses',variables('nvaArray')[copyIndex()].pubIP) ]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaArray')[copyIndex()].nsgName )]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('nvaArray')[copyIndex()].privateIP]",
                            "subnet": {
                                "id": "[resourceId( 'Microsoft.Network/virtualNetworks/subnets', variables('nvaArray')[copyIndex()].vnetName, variables('nvaArray')[copyIndex()].subnetName)]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('nvaArray')[copyIndex()].pubIP) ]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nvaArray')[copyIndex()].nsgName )]"
                },
                "primary": true,
                "enableIPForwarding": "[variables('nvaArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('nvaArray')[copyIndex()].acceleratedNetworking]"
            },
            "copy": {
                "name": "nicCopy",
                "count": "[variables('nvaCount')]"
            }
        },
        {
            "condition": "[variables('nvaArray')[copyIndex()].deployment]",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('nvaArray')[copyIndex()].vmName]",
            "apiVersion": "2021-11-01",
            "location": "[variables('nvaArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nvaArray')[copyIndex()].nicName )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('nvaArray')[copyIndex()].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('nvaArray')[copyIndex()].vmName]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "customData": "[base64(variables('nvaArray')[copyIndex()].customData)]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('nvaArray')[copyIndex()].publisher]",
                        "offer": "[variables('nvaArray')[copyIndex()].offer]",
                        "sku": "[variables('nvaArray')[copyIndex()].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('vmStorageAccountType')]"
                        },
                        "name": "[concat(variables('nvaArray')[copyIndex()].vmName, '-OSdisk')]"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',  variables('nvaArray')[copyIndex()].nicName)]"
                        }
                    ]
                }
            },
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('nvaCount')]"
            }
        }
    ]
}
