{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "eastus",
            "metadata": {
                "description": "azure region where is deployed the vnet"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "ADMINISTRATOR_USERNAME",
            "metadata": {
                "description": "admin username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "ADMINISTRATOR_PASSWORD",
            "metadata": {
                "description": "admin password"
            }
        }
    },
    "variables": {
        "location": "[parameters('location')]",
        //
        // Virtual Networks
        "vNet1": {
            "location": "[variables('location')]", // location VNet1
            "name": "VNet1", // VNet name
            "addressSpacePrefix1": "10.0.1.0/24",  // address space vnet1-subnet1
            "addressSpacePrefix2": "10.0.2.0/24",  // address space vnet1-subnet2
            "addressSpacePrefix3": "10.0.3.0/24",  // address space vnet1-subnet3
            "addressSpacePrefix4": "10.0.4.0/24",  // address space vnet1-subnet3
            "subnet1Name": "subnet1",              // name vnet1-subnet1
            "subnet2Name": "subnet2",              // name vnet1-subnet2
            "subnet3Name": "subnet3",              // name vnet1-subnet3
            "subnet4Name": "subnet4",              // name vnet1-subnet4
            "subnet1Prefix": "10.0.1.0/24",        // address space vnet1-subnet1
            "subnet2Prefix": "10.0.2.0/24",        // address space vnet1-subnet2
            "subnet3Prefix": "10.0.3.0/24",        // address space vnet1-subnet3
            "subnet4Prefix": "10.0.4.0/24"         // address space vnet1-subnet4
        },
        "nsgName": "nsg",                           // NSG to accept traffic incoming in the vnet from internet
        "routeTableName2": "udr2",                  // UDR VNEt1-subnet1
        "routeTableName3": "udr3",                  // UDR VNEt1-subnet3
        "routeTableName4": "udr4",                  // UDR VNEt1-subnet3
        "loadBalancerName": "lb1",                  // name internal load balancer  
        "lbFrontEndIP1": "10.0.1.5",                // frontend LB IP address
        "lbFrontEndIP2": "10.0.1.6",                // frontend LB IP address
        "lbFrontEndConfig1Name": "lbFrontEndConf1", // Name frontend LB -Configuration1
        "backEndAddressPool1Name": "lbBackEndPool1",
        "lbFrontEndConfig2Name": "lbFrontEndConf2", // Name frontend LB -Configuration2
        "backEndAddressPool2Name": "lbBackEndPool2",
        "lbProbe1Name" : "lbprobe1",
        "lbProbe2Name" : "lbprobe2",
        "lbVnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNet1').name)]",
        "lbSubnetRef": "[concat(variables('lbVnetID'),'/subnets/', variables('vNet1').subnet1Name)]",
        "availabilitySet1Name": "AvSet1",
        "availabilitySet2Name": "AvSet2",
        "adminUsername": "[parameters('adminUsername')]", // administrator VMs
        "adminPassword": "[parameters('adminPassword')]", // password VMs
        "vmsize": "Standard_B1s",
        // array of VMs working as Network Virtual Appliance/Firewall
        "nvarray": [
            {
                "location": "[variables('location')]",
                "vmName": "nva1",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet1Name]",
                "privateIP": "10.0.1.10",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "availabilitySetName": "[variables('availabilitySet1Name')]",
                "backEndAddressPoolName": "[variables('backEndAddressPool1Name')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "nva2",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet1Name]",
                "privateIP": "10.0.1.11",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "availabilitySetName": "[variables('availabilitySet1Name')]",
                "backEndAddressPoolName": "[variables('backEndAddressPool1Name')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "nva3",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet1Name]",
                "privateIP": "10.0.1.20",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "availabilitySetName": "[variables('availabilitySet2Name')]",
                "backEndAddressPoolName": "[variables('backEndAddressPool2Name')]"
            },
            {
                "location": "[variables('location')]",
                "vmName": "nva4",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet1Name]",
                "privateIP": "10.0.1.21",
                "enableIPForwarding": true,
                "acceleratedNetworking": false,
                "availabilitySetName": "[variables('availabilitySet2Name')]",
                "backEndAddressPoolName": "[variables('backEndAddressPool2Name')]"
            }
        ],
        "vmarray": [
            {
                "location": "[variables('location')]",
                "vmName": "vm2",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet2Name]",
                "privateIP": "10.0.2.10",
                "enableIPForwarding": false,
                "acceleratedNetworking": false
            },
            {
                "location": "[variables('location')]",
                "vmName": "vm3",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet3Name]",
                "privateIP": "10.0.3.10",
                "enableIPForwarding": false,
                "acceleratedNetworking": false
            },
            {
                "location": "[variables('location')]",
                "vmName": "vm4",
                "vmSize": "[variables('vmSize')]",
                "imagePublisher": "openlogic",
                "imageOffer": "CentOS",
                "OSVersion": "7.5",
                "vNetName": "[variables('vNet1').name]",
                "subnetName": "[variables('vNet1').subnet4Name]",
                "privateIP": "10.0.4.10",
                "enableIPForwarding": false,
                "acceleratedNetworking": false
            }
        ],
        "nvCount": "[length(variables('nvArray'))]",
        "vmCount": "[length(variables('vmArray'))]"
    },
    "resources": [
        {
            "apiVersion": "2017-12-01",
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySet1Name')]",
            "location": "[variables('vNet1').location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2
            }
        },
        {
            "apiVersion": "2017-12-01",
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySet2Name')]",
            "location": "[variables('vNet1').location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2
            }
        },
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "location": "[variables('vNet1').location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH-rule",
                        "properties": {
                            "description": "allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        // Create udr2 
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTableName2')]",
            "location": "[variables('vNet1').location]",
            "properties": {
                "routes": [
                    {
                        "name": "RouteTo-Subnet3",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet3Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP1')]"
                        }
                    },
                    {
                        "name": "RouteTo-Subnet4",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet4Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP2')]"
                        }
                    }
                ]
            }
        },
        // Create udr3 
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTableName3')]",
            "location": "[variables('vNet1').location]",
            "properties": {
                "routes": [
                    {
                        "name": "RouteTo-Subnet2",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet2Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP1')]"
                        }
                    },
                    {
                        "name": "RouteTo-Subnet4",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet4Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP2')]"
                        }
                    }
                ]
            }
        },
        // Create udr4 
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTableName4')]",
            "location": "[variables('vNet1').location]",
            "properties": {
                "routes": [
                    {
                        "name": "RouteTo-Subnet2",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet2Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP2')]"
                        }
                    },
                    {
                        "name": "RouteTo-Subnet3",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet3Prefix]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('lbFrontEndIP2')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vNet1').name]",
            "location": "[variables('vNet1').location]",
            "dependsOn": [
                "[concat('Microsoft.Network/routeTables/', variables('routeTableName2'))]",
                "[concat('Microsoft.Network/routeTables/', variables('routeTableName3'))]",
                "[concat('Microsoft.Network/routeTables/', variables('routeTableName4'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
            ],
            "comments": "Create VNet1",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vNet1').addressSpacePrefix1]",
                        "[variables('vNet1').addressSpacePrefix2]",
                        "[variables('vNet1').addressSpacePrefix3]",
                        "[variables('vNet1').addressSpacePrefix4]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('vNet1').subnet1Name]",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet1Prefix]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('vNet1').subnet2Name]",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet2Prefix]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            },
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName2'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('vNet1').subnet3Name]",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet3Prefix]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            },
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName3'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('vNet1').subnet4Name]",
                        "properties": {
                            "addressPrefix": "[variables('vNet1').subnet4Prefix]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                            },
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName4'))]"
                            }
                        }
                    }
                ]
            }
        },
        // Load Balancer VNet1
        {
            "apiVersion": "2018-02-01",
            "name": "[variables('loadBalancerName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[variables('location')]",
            "dependsOn": [
                "[variables('lbVnetID')]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('lbFrontEndConfig1Name')]",
                        "properties": {
                            "subnet": {
                                "id": "[variables('lbSubnetRef')]"
                            },
                            "privateIPAddress": "[variables('lbFrontEndIP1')]",
                            "privateIPAllocationMethod": "Static"
                        }
                    },
                    {
                        "name": "[variables('lbFrontEndConfig2Name')]",
                        "properties": {
                            "subnet": {
                                "id": "[variables('lbSubnetRef')]"
                            },
                            "privateIPAddress": "[variables('lbFrontEndIP2')]",
                            "privateIPAllocationMethod": "Static"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('backEndAddressPool1Name')]"
                    },
                    {
                        "name": "[variables('backEndAddressPool2Name')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/',variables('lbFrontEndConfig1Name'))]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/',variables('backEndAddressPool1Name'))]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', variables('lbProbe1Name') )]"
                            },
                            "protocol": "All",
                            "frontendPort": 0,
                            "backendPort": 0,
                            "loadDistribution": "Default",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4
                        },
                        "name": "lbAnyPortRule1"
                    },
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/',variables('lbFrontEndConfig2Name'))]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/',variables('backEndAddressPool2Name'))]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', variables('lbProbe2Name') )]"
                            },
                            "protocol": "All",
                            "frontendPort": 0,
                            "backendPort": 0,
                            "loadDistribution": "Default",
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4
                        },
                        "name": "lbAnyPortRule2"
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('lbProbe1Name')]",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "[variables('lbProbe2Name')]",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },                   
                ]
            }
        },
        ///////////////////////////////////////
        // Create Network Virtual Appliance VMs
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('nvArray')[copyIndex()].vmName,'-pubIP')]",
            "location": "[variables('nvArray')[copyIndex()].location]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static" // StandardSkuPublicIPAddresses must be "Static"
            },
            "copy": {
                "name": "publicIpCopy",
                "count": "[variables('nvCount')]"
            }
        },
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat( variables('nvArray')[copyIndex()].vmName,'-NIC' )]",
            "location": "[variables('nvArray')[copyIndex()].location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNet1').name)]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('nvArray')[copyIndex()].vmName,'-pubIP' )]",
                "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
            ],
            "properties": {
                "primary": true,
                "enableIPForwarding": "[variables('nvArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('nvArray')[copyIndex()].acceleratedNetworking]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('nvArray')[copyIndex()].privateIP]",
                            "publicIPAddress": {
                                "id": "[resourceId( 'Microsoft.Network/publicIPAddresses',concat( variables('nvArray')[copyIndex()].vmName,'-pubIP' )  )]"
                            },
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('nvArray')[copyIndex()].vNetName),'/subnets/', variables('nvArray')[copyIndex()].subnetName)]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')),'/backendAddressPools/',variables('nvArray')[copyIndex()].backEndAddressPoolName  )]"
                                }
                            ]
                        }
                    }
                ]
            },
            "copy": {
                "name": "nicCopy",
                "count": "[variables('nvCount')]"
            }
        },
        {
            "apiVersion": "2017-12-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('nvArray')[copyIndex()].vmName]",
            "location": "[variables('nvArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('nvArray')[copyIndex()].vmName,'-NIC')  )]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySet1Name'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySet2Name'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('nvArray')[copyIndex()].availabilitySetName )]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('nvArray')[copyIndex()].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('nvArray')[copyIndex()].vmName]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('nvArray')[copyIndex()].imagePublisher]",
                        "offer": "[variables('nvArray')[copyIndex()].imageOffer]",
                        "sku": "[variables('nvArray')[copyIndex()].OSVersion]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat( variables('nvArray')[copyIndex()].vmName,'-NIC' )  )]"
                        }
                    ]
                }
            },
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('nvCount')]"
            }
        },
        ////////////////////////////////////////////////////////////////
        // Create Virtual Machines
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('vmArray')[copyIndex()].vmName,'-pubIP')]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            },
            "copy": {
                "name": "publicIpCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "apiVersion": "2018-01-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat( variables('vmArray')[copyIndex()].vmName,'-NIC' )]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vNet1').name)]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('vmArray')[copyIndex()].vmName,'-pubIP' )]"
            ],
            "properties": {
                "primary": true,
                "enableIPForwarding": "[variables('vmArray')[copyIndex()].enableIPForwarding]",
                "enableAcceleratedNetworking": "[variables('vmArray')[copyIndex()].acceleratedNetworking]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('vmArray')[copyIndex()].privateIP]",
                            "publicIPAddress": {
                                "id": "[resourceId( 'Microsoft.Network/publicIPAddresses',concat( variables('vmArray')[copyIndex()].vmName,'-pubIP' )  )]"
                            },
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vmArray')[copyIndex()].vNetName),'/subnets/', variables('vmArray')[copyIndex()].subnetName)]"
                            }
                        }
                    }
                ]
            },
            "copy": {
                "name": "nicCopy",
                "count": "[variables('vmCount')]"
            }
        },
        {
            "apiVersion": "2017-03-30",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmArray')[copyIndex()].vmName]",
            "location": "[variables('vmArray')[copyIndex()].location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmArray')[copyIndex()].vmName,'-NIC')  )]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmArray')[copyIndex()].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('vmArray')[copyIndex()].vmName]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vmArray')[copyIndex()].imagePublisher]",
                        "offer": "[variables('vmArray')[copyIndex()].imageOffer]",
                        "sku": "[variables('vmArray')[copyIndex()].OSVersion]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat( variables('vmArray')[copyIndex()].vmName,'-NIC' )  )]"
                        }
                    ]
                }
            },
            "copy": {
                "name": "nodeCopy",
                "count": "[variables('vmCount')]"
            }
        }
    ]
}