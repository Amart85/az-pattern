{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "mngIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "management public IP address to connect in SSH to the VM. it can be set to empty string if you do not want filtering"
      }
    },
    "location1": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "Azure region"
      }
    },
    "location2": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "Azure region"
      }
    },

    "vNet1Name": {
      "type": "string",
      "defaultValue": "vnet1",
      "metadata": {
        "description": "Arbitrary name for the Azure Virtual Network"
      }
    },
    "vNet2Name": {
      "type": "string",
      "defaultValue": "vnet2",
      "metadata": {
        "description": "Arbitrary name for the Azure Virtual Network"
      }
    },
    "vNet1AddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "CIDR block representing the address space of the Azure VNet"
      }
    },
    "vNet2AddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "CIDR block representing the address space of the Azure VNet"
      }
    },
    "vnet1subnet1Name": {
      "type": "string",
      "defaultValue": "vnet1subnet1",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet1subnet2Name": {
      "type": "string",
      "defaultValue": "vnet1subnet2",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet1subnet3Name": {
      "type": "string",
      "defaultValue": "vnet1subnet3",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet2subnet1Name": {
      "type": "string",
      "defaultValue": "vnet2subnet1",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet2subnet2Name": {
      "type": "string",
      "defaultValue": "vnet2subnet2",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet2subnet3Name": {
      "type": "string",
      "defaultValue": "vnet2subnet3",
      "metadata": {
        "description": "Arbitrary name for the Azure Subnet"
      }
    },
    "vnet1subnet1Prefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "vnet1subnet2Prefix": {
      "type": "string",
      "defaultValue": "10.0.1.32/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "vnet1subnet3Prefix": {
      "type": "string",
      "defaultValue": "10.0.1.64/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "vnet2subnet1Prefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "vnet2subnet2Prefix": {
      "type": "string",
      "defaultValue": "10.0.2.32/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "vnet2subnet3Prefix": {
      "type": "string",
      "defaultValue": "10.0.2.64/27",
      "metadata": {
        "description": "CIDR block for VM subnet, subset of vNet1AddressPrefix address space"
      }
    },
    "linux": {
      "type": "object",
      "defaultValue": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-server-jammy",
        "sku": "22_04-lts-gen2"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for sample VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User password for sample VM"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The storage account type for the disks of the VM"
      }
    }
  },
  "variables": {
    "location1": "[parameters('location1')]",
    "location2": "[parameters('location2')]",

    "vnet1Name": "[parameters('vNet1Name')]",
    "vnet2Name": "[parameters('vNet2Name')]",

    "vnet1subnet1Name": "[parameters('vnet1subnet1Name')]",
    "vnet1subnet2Name": "[parameters('vnet1subnet2Name')]",
    "vnet1subnet3Name": "[parameters('vnet1subnet3Name')]",
    "vnet2subnet1Name": "[parameters('vnet2subnet1Name')]",
    "vnet2subnet2Name": "[parameters('vnet2subnet2Name')]",
    "vnet2subnet3Name": "[parameters('vnet2subnet3Name')]",

    "vnet1AddressPrefix": "[parameters('vnet1AddressPrefix')]",
    "vnet2AddressPrefix": "[parameters('vnet2AddressPrefix')]",
    "vnet1subnet1Prefix": "[parameters('vnet1subnet1Prefix')]",
    "vnet1subnet2Prefix": "[parameters('vnet1subnet2Prefix')]",
    "vnet1subnet3Prefix": "[parameters('vnet1subnet3Prefix')]",
    "vnet2subnet1Prefix": "[parameters('vnet2subnet1Prefix')]",
    "vnet2subnet2Prefix": "[parameters('vnet2subnet2Prefix')]",
    "vnet2subnet3Prefix": "[parameters('vnet2subnet3Prefix')]",
    "peeringNamevnet1vnet2": "[concat(variables('vnet1Name'),'To',variables('vnet2Name'))]",
    "peeringNamevnet2vnet1": "[concat(variables('vnet2Name'),'To',variables('vnet1Name'))]",
    "routeTableName1": "udr-ilb",

    "ilbName": "ilb",
    "ilbSkuName": "Standard",
    "ilbFrontEndIP1": "10.0.2.11",
    "ilbFrontEndIP2": "10.0.2.12",
    "ilbFrontEndIP3": "10.0.2.13",
    "ilbFrontEndIP4": "10.0.2.14",
    "ilbFrontEndIP5": "10.0.2.15",
    "ilbFrontEnd1Name": "ilbFrontEndConf1",
    "ilbFrontEnd2Name": "ilbFrontEndConf2",
    "ilbFrontEnd3Name": "ilbFrontEndConf3",
    "ilbFrontEnd4Name": "ilbFrontEndConf4",
    "ilbFrontEnd5Name": "ilbFrontEndConf5",
    "ilbBackEndAddressPool1Name": "ilbBackEndPool1",
    "ilbBackEndAddressPool2Name": "ilbBackEndPool2",
    "ilbBackEndAddressPool3Name": "ilbBackEndPool3",
    "ilbBackEndAddressPool4Name": "ilbBackEndPool4",
    "ilbBackEndAddressPool5Name": "ilbBackEndPool5",
    "ilbprobeName": "ilbprobe",
    "ilbprobePort": 80,


    "linuxUpdate": "sudo apt update",
    "linuxNgixCommand": "[concat('sudo apt-get -y install nginx && sudo systemctl enable nginx && sudo systemctl start nginx',' && ','echo \"<style> h1 { color: blue; } </style> <h1>\" > /var/www/html/index.nginx-debian.html', ' && ', 'cat /etc/hostname >> /var/www/html/index.nginx-debian.html', ' && ', 'echo \" </h1>\" >> /var/www/html/index.nginx-debian.html')]",
    "linuxIperfCommand": "sudo apt-get -y install iperf3",
    "linuxCommand": "[concat( 'sleep 1m', ' &&', variables('linuxUpdate'), ' && ', variables('linuxNgixCommand'), ' && ', variables('linuxIperfCommand'))]",
    "vm11Name": "vm11",
    "vm12Name": "vm12",
    "vm13Name": "vm13",
    "vm14Name": "vm14",
    "vm15Name": "vm15",
    "vm11IpAddresses": "10.0.1.41",
    "vm12IpAddresses": "10.0.1.42",
    "vm13IpAddresses": "10.0.1.43",
    "vm14IpAddresses": "10.0.1.44",
    "vm15IpAddresses": "10.0.1.45",

    "vm21Name": "vm21",
    "vm22Name": "vm22",
    "vm23Name": "vm23",
    "vm24Name": "vm24",
    "vm25Name": "vm25",
    "vm21IpAddresses": "10.0.2.41",
    "vm22IpAddresses": "10.0.2.42",
    "vm23IpAddresses": "10.0.2.43",
    "vm24IpAddresses": "10.0.2.44",
    "vm25IpAddresses": "10.0.2.45",
    // "vm11Size": "Standard_F48s_v2",
    "vm11Size": "Standard_F8s_v2",
    "vm12Size": "Standard_F8s_v2",
    "vm13Size": "Standard_F8s_v2",
    "vm14Size": "Standard_F8s_v2",
    "vm15Size": "Standard_F8s_v2",
    "vm21Size": "Standard_F8s_v2",
    "vm22Size": "Standard_F8s_v2",
    "vm23Size": "Standard_F8s_v2",
    "vm24Size": "Standard_F8s_v2",
    "vm25Size": "Standard_F8s_v2",
    "vmArray": [
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm11Name')]",
        "vmSize": "[variables('vm11Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet1Name')]",
        "subnetName": "[variables('vnet1subnet2Name')]",
        "nicName": "[concat(variables('vm11Name'),'-nic')]",
        "privateIP": "[variables('vm11IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm11Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm11Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm12Name')]",
        "vmSize": "[variables('vm12Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet1Name')]",
        "subnetName": "[variables('vnet1subnet2Name')]",
        "nicName": "[concat(variables('vm12Name'),'-nic')]",
        "privateIP": "[variables('vm12IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm12Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm12Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm13Name')]",
        "vmSize": "[variables('vm13Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet1Name')]",
        "subnetName": "[variables('vnet1subnet2Name')]",
        "nicName": "[concat(variables('vm13Name'),'-nic')]",
        "privateIP": "[variables('vm13IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm13Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm13Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm14Name')]",
        "vmSize": "[variables('vm14Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet1Name')]",
        "subnetName": "[variables('vnet1subnet2Name')]",
        "nicName": "[concat(variables('vm14Name'),'-nic')]",
        "privateIP": "[variables('vm14IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm14Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm14Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm15Name')]",
        "vmSize": "[variables('vm15Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet1Name')]",
        "subnetName": "[variables('vnet1subnet2Name')]",
        "nicName": "[concat(variables('vm15Name'),'-nic')]",
        "privateIP": "[variables('vm15IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm15Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm15Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location2')]",
        "vmName": "[variables('vm21Name')]",
        "vmSize": "[variables('vm21Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet2Name')]",
        "subnetName": "[variables('vnet2subnet2Name')]",
        "nicName": "[concat(variables('vm21Name'),'-nic')]",
        "privateIP": "[variables('vm21IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm21Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm21Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm22Name')]",
        "vmSize": "[variables('vm22Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet2Name')]",
        "subnetName": "[variables('vnet2subnet2Name')]",
        "nicName": "[concat(variables('vm22Name'),'-nic')]",
        "privateIP": "[variables('vm22IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm22Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm22Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm23Name')]",
        "vmSize": "[variables('vm23Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet2Name')]",
        "subnetName": "[variables('vnet2subnet2Name')]",
        "nicName": "[concat(variables('vm23Name'),'-nic')]",
        "privateIP": "[variables('vm23IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm23Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm23Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm24Name')]",
        "vmSize": "[variables('vm24Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet2Name')]",
        "subnetName": "[variables('vnet2subnet2Name')]",
        "nicName": "[concat(variables('vm24Name'),'-nic')]",
        "privateIP": "[variables('vm24IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm24Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm24Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      },
      {
        "deployment": true,
        "location": "[parameters('location1')]",
        "vmName": "[variables('vm25Name')]",
        "vmSize": "[variables('vm25Size')]",
        "publisher": "[parameters('linux').publisher]",
        "offer": "[parameters('linux').offer]",
        "sku": "[parameters('linux').sku]",
        "vnetName": "[variables('vnet2Name')]",
        "subnetName": "[variables('vnet2subnet2Name')]",
        "nicName": "[concat(variables('vm25Name'),'-nic')]",
        "privateIP": "[variables('vm25IpAddresses')]",
        "enableIPForwarding": false,
        "acceleratedNetworking": true,
        "nsgName": "[concat(variables('vm25Name'),'-nsg')]",
        "pubIP": "[concat(variables('vm25Name'),'-pubIP')]",
        "commandToExecute": "[variables('linuxCommand')]"
      }
    ],
    "vmCount": "[length(variables('vmArray'))]",
    "vmStorageAccountType": "[parameters('storageAccountType')]"
  },
  "resources": [
    {
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableName1')]",
      "location": "[parameters('location1')]",
      "comments": "udr to the front end of the internal load balancer",
      "properties": {
        "routes": [
          {
            "name": "RT-ilb-FE1",
            "properties": {
              "addressPrefix": "[concat(variables('vm21IpAddresses'),'/32')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('ilbFrontEndIP1')]"
            }
          },
          {
            "name": "RT-ilb-FE2",
            "properties": {
              "addressPrefix": "[concat(variables('vm22IpAddresses'),'/32')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('ilbFrontEndIP2')]"
            }
          },
          {
            "name": "RT-ilb-FE3",
            "properties": {
              "addressPrefix": "[concat(variables('vm23IpAddresses'),'/32')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('ilbFrontEndIP3')]"
            }
          },
          {
            "name": "RT-ilb-FE4",
            "properties": {
              "addressPrefix": "[concat(variables('vm24IpAddresses'),'/32')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('ilbFrontEndIP4')]"
            }
          },
          {
            "name": "RT-ilb-FE5",
            "properties": {
              "addressPrefix": "[concat(variables('vm25IpAddresses'),'/32')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('ilbFrontEndIP5')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnet1Name')]",
      "apiVersion": "2020-06-01",
      "location": "[variables('location1')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('routeTableName1'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnet1AddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnet1subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet1subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('vnet1subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet1subnet2Prefix')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName1'))]"
              }
            }
          },
          {
            "name": "[variables('vnet1subnet3Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet1subnet3Prefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnet2Name')]",
      "apiVersion": "2020-06-01",
      "location": "[variables('location2')]",
      "dependsOn": [],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnet2AddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vnet2subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet2subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('vnet2subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet2subnet2Prefix')]"
            }
          },
          {
            "name": "[variables('vnet2subnet3Name')]",
            "properties": {
              "addressPrefix": "[variables('vnet2subnet3Prefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "name": "[concat(variables('vnet1Name'),'/',variables('peeringNamevnet1vnet2'))]",
      "apiVersion": "2021-05-01",
      "location": "[variables('location1')]",
      "comments": "This is the peering from vnet1 to vnet2",
      "dependsOn": [
        "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1Name'))]",
        "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "name": "[concat(variables('vnet2Name'),'/',variables('peeringNamevnet2vnet1'))]",
      "apiVersion": "2021-05-01",
      "location": "[variables('location2')]",
      "comments": "This is the peering from vnet2 to vnet1",
      "dependsOn": [
        "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1Name'))]",
        "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
      ],
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId( 'Microsoft.Network/virtualNetworks', variables('vnet1Name'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-05-01",
      "name": "[variables('ilbName')]",
      "location": "[parameters('location2')]",
      "comments": "internal Load Balancer",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
      ],
      "sku": {
        "name": "[variables('ilbSkuName')]"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('ilbFrontEnd1Name')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('vnet2subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('ilbFrontEndIP1')]",
              "privateIPAddressVersion": "IPv4"
            }
          },
          {
            "name": "[variables('ilbFrontEnd2Name')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('vnet2subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('ilbFrontEndIP2')]",
              "privateIPAddressVersion": "IPv4"
            }
          },
          {
            "name": "[variables('ilbFrontEnd3Name')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('vnet2subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('ilbFrontEndIP3')]",
              "privateIPAddressVersion": "IPv4"
            }
          },
          {
            "name": "[variables('ilbFrontEnd4Name')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('vnet2subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('ilbFrontEndIP4')]",
              "privateIPAddressVersion": "IPv4"
            }
          },
          {
            "name": "[variables('ilbFrontEnd5Name')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet2Name'), variables('vnet2subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('ilbFrontEndIP5')]",
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('ilbBackEndAddressPool1Name')]"
          },
          {
            "name": "[variables('ilbBackEndAddressPool2Name')]"
          },
          {
            "name": "[variables('ilbBackEndAddressPool3Name')]"
          },
          {
            "name": "[variables('ilbBackEndAddressPool4Name')]"
          },
          {
            "name": "[variables('ilbBackEndAddressPool5Name')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "ilbAnyPortRule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('ilbName'),variables('ilbFrontEnd1Name'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'),variables('ilbBackEndAddressPool1Name'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'),variables('ilbprobeName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "loadDistribution": "Default",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4
            }
          },
          {
            "name": "ilbAnyPortRule2",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('ilbName'),variables('ilbFrontEnd2Name'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'),variables('ilbBackEndAddressPool2Name'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'),variables('ilbprobeName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "loadDistribution": "Default",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4
            }
          },
          {
            "name": "ilbAnyPortRule3",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('ilbName'),variables('ilbFrontEnd3Name'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'),variables('ilbBackEndAddressPool3Name'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'),variables('ilbprobeName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "loadDistribution": "Default",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4
            }
          },
          {
            "name": "ilbAnyPortRule4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('ilbName'),variables('ilbFrontEnd4Name'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'),variables('ilbBackEndAddressPool4Name'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'),variables('ilbprobeName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "loadDistribution": "Default",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4
            }
          },
          {
            "name": "ilbAnyPortRule5",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('ilbName'),variables('ilbFrontEnd5Name'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'),variables('ilbBackEndAddressPool5Name'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'),variables('ilbprobeName'))]"
              },
              "protocol": "All",
              "frontendPort": 0,
              "backendPort": 0,
              "loadDistribution": "Default",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('ilbprobeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('ilbprobePort')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/backendAddressPools",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('ilbName'), '/', variables('ilbBackEndAddressPool1Name'))]",
      "location": "[parameters('location2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "properties": {
        "loadBalancerBackendAddresses": [
          {
            "name": "vm21address",
            "properties": {
              "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
              },
              "ipAddress": "[variables('vm21IpAddresses')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/backendAddressPools",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('ilbName'), '/', variables('ilbBackEndAddressPool2Name'))]",
      "location": "[parameters('location2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "properties": {
        "loadBalancerBackendAddresses": [
          {
            "name": "vm22address",
            "properties": {
              "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
              },
              "ipAddress": "[variables('vm22IpAddresses')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/backendAddressPools",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('ilbName'), '/', variables('ilbBackEndAddressPool3Name'))]",
      "location": "[parameters('location2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "properties": {
        "loadBalancerBackendAddresses": [
          {
            "name": "vm23address",
            "properties": {
              "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
              },
              "ipAddress": "[variables('vm23IpAddresses')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/backendAddressPools",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('ilbName'), '/', variables('ilbBackEndAddressPool4Name'))]",
      "location": "[parameters('location2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "properties": {
        "loadBalancerBackendAddresses": [
          {
            "name": "vm24address",
            "properties": {
              "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
              },
              "ipAddress": "[variables('vm24IpAddresses')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers/backendAddressPools",
      "apiVersion": "2021-05-01",
      "name": "[concat(variables('ilbName'), '/', variables('ilbBackEndAddressPool5Name'))]",
      "location": "[parameters('location2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "properties": {
        "loadBalancerBackendAddresses": [
          {
            "name": "vm25address",
            "properties": {
              "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet2Name'))]"
              },
              "ipAddress": "[variables('vm25IpAddresses')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[variables('vmArray')[copyIndex()].deployment]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-05-01",
      "name": "[variables('vmArray')[copyIndex()].nsgName]",
      "location": "[variables('location1')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH-rule",
            "properties": {
              "description": "allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[if(equals(parameters('mngIP'), ''), '*', parameters('mngIP'))]",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 500,
              "direction": "Inbound"
            }
          }
        ]
      },
      "copy": {
        "name": "nsgCopy",
        "count": "[variables('vmCount')]"
      }
    },
    {
      "condition": "[variables('vmArray')[copyIndex()].deployment]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat( variables('vmArray')[copyIndex()].pubIP )]",
      "apiVersion": "2021-05-01",
      "location": "[variables('vmArray')[copyIndex()].location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "copy": {
        "name": "pubIPCopy",
        "count": "[variables('vmCount')]"
      }
    },
    {
      "condition": "[variables('vmArray')[copyIndex()].deployment]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('vmArray')[copyIndex()].nicName]",
      "apiVersion": "2021-05-01",
      "location": "[variables('vmArray')[copyIndex()].location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',variables('vmArray')[copyIndex()].vnetName) ]",
        "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmArray')[copyIndex()].pubIP) ]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName )]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('vmArray')[copyIndex()].privateIP]",
              "subnet": {
                "id": "[resourceId( 'Microsoft.Network/virtualNetworks/subnets', variables('vmArray')[copyIndex()].vnetName, variables('vmArray')[copyIndex()].subnetName)]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmArray')[copyIndex()].pubIP) ]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vmArray')[copyIndex()].nsgName )]"
        },
        "primary": true,
        "enableIPForwarding": "[variables('vmArray')[copyIndex()].enableIPForwarding]",
        "enableAcceleratedNetworking": "[variables('vmArray')[copyIndex()].acceleratedNetworking]"
      },
      "copy": {
        "name": "nicCopy",
        "count": "[variables('vmCount')]"
      }
    },
    {
      "condition": "[variables('vmArray')[copyIndex()].deployment]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmArray')[copyIndex()].vmName]",
      "apiVersion": "2021-11-01",
      "location": "[variables('vmArray')[copyIndex()].location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmArray')[copyIndex()].nicName )]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmArray')[copyIndex()].vmSize]"
        },
        "osProfile": {
          "computerName": "[variables('vmArray')[copyIndex()].vmName]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmArray')[copyIndex()].publisher]",
            "offer": "[variables('vmArray')[copyIndex()].offer]",
            "sku": "[variables('vmArray')[copyIndex()].sku]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "[variables('vmStorageAccountType')]"
            },
            "name": "[concat(variables('vmArray')[copyIndex()].vmName, '-OSdisk')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',  variables('vmArray')[copyIndex()].nicName)]"
            }
          ]
        }
      },
      "copy": {
        "name": "nodeCopy",
        "count": "[variables('vmCount')]"
      }
    },
    {
      "condition": "[variables('vmArray')[copyIndex()].deployment]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmArray')[copyIndex()].vmName, '/', 'installcustomscript')]",
      "apiVersion": "2021-11-01",
      "comments": "custom script extension for ubuntu",
      "location": "[variables('vmArray')[copyIndex()].location]",
      "copy": {
        "name": "nodeCopy",
        "count": "[variables('vmCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmArray')[copyIndex()].vmName )]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "commandToExecute": "[variables('vmArray')[copyIndex()].commandToExecute]"
        }
      }
    }
  ],
  "outputs": {}
}